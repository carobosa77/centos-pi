#!/bin/bash

source ../do_actions.env ""

################################################################################
# Check environment & print usage information

# Print usage information
do_usage() {
  cat << EOD
This script copies the image file to target SD card, building partitions. Do not invoke this script directly.
EOD
  exit 1
}

# Check environment
do_check_environment() {
  test -z "${IMAGE}" && echo "Error: Missing image file name IMAGE variable." >&2 && \
    return 1
  test ! -e ${IMAGE} && echo "Error: Image file '${IMAGE}' does not exists." >&2 && \
    return 1
  test -z "${TARGET}" && echo "Error: Missing target device name TARGET variable." >&2 && \
    return 1
  test ! -b ${TARGET} && echo "Error: Device '${TARGET}' does not exists." 1>&2 && \
    return 1

  return 0
}

do_confirm() {
  local resp
  read -p "Are you sure you want to write the image [yN]? " resp
  case $resp in
    [Yy]* ) return 0; break;;
    * ) return 1;;
  esac
}

[ "${1}" = "" ] || do_usage
do_check_environment || do_usage

[ "${FORCE}" = "true" ] || do_confirm || exit 1

################################################################################
# Defines the environment variables for the temporary directory

TEMP=${TEMP%/}
SOURCE_MOUNT=${TEMP}/source.mnt; [ -d ${SOURCE_MOUNT} ] || mkdir ${SOURCE_MOUNT}
TARGET_MOUNT=${TEMP}/target.mnt; [ -d ${TARGET_MOUNT} ] || mkdir ${TARGET_MOUNT}

################################################################################
# Extracts and makes a copy of the source image in a temporary directory

[ -d ${TEMP} ] || mkdir ${TEMP}
if [ ! -e ${TEMP}/source.img ]; then
  echo -n "${IMAGE} -> ${TEMP}/source.img ..."
  if [ "${IMAGE: -3}" = ".xz" ]; then
    xzcat ${IMAGE} > ${TEMP}/source.img
  elif [ "${IMAGE: -3}" = ".gz" ]; then
    zcat ${IMAGE} > ${TEMP}/source.img
  elif [ "${1:(-4)}" = ".zip" ]; then
    unzip -p ${IMAGE} > ${TEMP}/source.img
  else
    cp ${IMAGE} ${TEMP}/source.img
  fi
  echo " Done."
fi
SOURCE=$( losetup --find --show --partscan ${TEMP}/source.img )
partprobe ${SOURCE}

################################################################################
# Mounts source image copy

do_mount_source ${SOURCE} ${SOURCE_MOUNT}

################################################################################
# Umounts target filesystems

do_umount ${TARGET}

################################################################################
# Creates target filesystems

do_sfdisk | sfdisk -q ${TARGET} || true
partprobe ${TARGET}

do_fstab | while read LINE; do
  PAR=(${LINE})

  FS_SPEC=${PAR[0]}
  FS_FILE=${PAR[1]}
  FS_VFSTYPE=${PAR[2]}
  LABEL=$( echo "${FS_FILE}" | sed 's!/!_!g' )
  UUID=random

  if mount | grep -q " ${SOURCE_MOUNT}${FS_FILE%/} "; then
    SOURCE_DEVICE=$( mount | grep " ${SOURCE_MOUNT}${FS_FILE%/} " | cut -f1 -d' ' )
    LABEL=$( blkid -s LABEL -o value ${SOURCE_DEVICE} )
    UUID=$( blkid -s UUID -o value ${SOURCE_DEVICE} )
  fi

  [ -n "${FS_VFSTYPE}" ] && echo -n "mkfs.${FS_VFSTYPE} ${FS_SPEC} ..."
  case "${FS_VFSTYPE}" in
    vfat) mkfs.vfat -i ${UUID//-} ${FS_SPEC};;
    swap) mkswap -f ${FS_SPEC};;
    ext3) mkfs.ext3 -q -F -L ${LABEL} -U ${UUID} ${FS_SPEC};;
    ext4) mkfs.ext4 -q -F -L ${LABEL} -U ${UUID} ${FS_SPEC};;
    xfs) mkfs.xfs -f ${FS_SPEC};; # CentOS 7 for Raspberry pi: Kernel cannot boot this
  esac > /dev/null
  [ -n "${FS_VFSTYPE}" ] && echo " Done."
done

################################################################################
# Build fstab file

do_fstab | sort -k 2,2 | while read LINE; do
  PAR=(${LINE})

  FS_SPEC="UUID=$( blkid -s UUID -o value ${PAR[0]} )"
  FS_FILE=${PAR[1]}
  #FS_VFSTYPE=$( blkid -s TYPE -o value ${PAR[0]} )
  FS_VFSTYPE=${PAR[2]}
  FS_MNTOPS=${PAR[3]}
  FS_FREQ=${PAR[4]}
  FS_PASSNO=${PAR[5]}

  [ -n "${FS_FILE}" ] && \
    echo "${FS_SPEC} ${FS_FILE} ${FS_VFSTYPE} ${FS_MNTOPS} ${FS_FREQ} ${FS_PASSNO}"
done > ${TEMP}/fstab
cp -fbv --no-preserve=all ${TEMP}/fstab ${SOURCE_MOUNT}/etc/fstab

################################################################################
# Move files from image to TARGET device
shopt -s dotglob

do_fstab | sort -r -k 2,2 | while read LINE; do
  PAR=(${LINE})

  FS_SPEC=${PAR[0]}
  FS_FILE=${PAR[1]}

  if [ -n "${FS_FILE}" -a "${FS_FILE}" != "swap" -a "${FS_FILE}" != "none" ]; then
    echo -n "${FS_FILE} -> ${FS_SPEC} ..."
    mount ${FS_SPEC} ${TARGET_MOUNT}
    [ "$( ls -A ${SOURCE_MOUNT}${FS_FILE} 2> /dev/null )" ] && \
      mv ${SOURCE_MOUNT}${FS_FILE}/* ${TARGET_MOUNT}
    umount ${FS_SPEC}
    echo " Done."

    if mount | grep -q " ${SOURCE_MOUNT}${FS_FILE%/} "; then
      echo -n "umount ${FS_FILE} ..."
      umount ${SOURCE_MOUNT}${FS_FILE}
      echo " Done"
    fi
  fi
done

################################################################################
# Finalize

losetup -d ${SOURCE}
rm -rf ${TEMP}

