#!/bin/bash

set -e

################################################################################
# Installs the packages indicated if they are not installed yet, for yum based
# distributions
#
# Installs packages indicated if they are not installed
# ${*}: package names
#
do_dnf_install() {
  local pkgs=""
  local pkg
  for pkg in ${*}; do
    if ! rpm -q ${pkg} > /dev/null 2>&1; then
      pkgs="${pkgs} ${pkg}"
    fi
  done
  if [ -n "${pkgs}" ]; then
    dnf -y install ${pkgs}
  fi
}

################################################################################
# Installs the packages indicated if they are not installed yet, for apt-get
# based distributions
#   ${*}: list of packages to install
do_apt_get_install() {
  apt-get update
  apt-get upgrade

  local pkgs=""
  local pkg
  for pkg in ${*}; do
    if ! dpkg --get-selections | grep -q "^${pkg}	"; then
      pkgs="${pkgs} ${pkg}"
    fi
  done
  if [ -n "${pkgs}" ]; then
    apt-get -q -y install ${pkgs}
  fi
}

################################################################################
# Updates / overwrites file content
#   STDIN: new file content
#   ${1}: name of the file to overwrite
do_file_update() {
  local file=$( mktemp )

  [ -e ${1} ] || ( echo "Error: File '${1}' does not exists." 1>&2 && return 1 )

  cat > ${file}

  ! diff ${file} ${1} || return 0

  chmod --reference=${1} ${file}
  chown --reference=${1} ${file}
  # TODO SELinux attributes? xattrs?
  mv --force --backup=numbered ${file} ${1}
}

################################################################################
# Appends content to a file
#   STDIN: new file content
#   ${1}: name of the file to modify
do_file_append() {
  local file=$( mktemp )

  [ -e ${1} ] || ( echo "Error: File '${1}' does not exists." 1>&2 && return 1 )

  cat > ${file}

  diff ${file} ${1} | grep '^<' || return 0

  cp --preserve=all --force --backup=numbered ${1} ${1}
  cat ${file} >> ${1}
}

################################################################################
# Replaces content in a file
#   ${1}: SED expression
#   ${2}: name of the file to modify
do_file_sed() {
  [ -e ${2} ] || ( echo "Error: File '${2}' does not exists." 1>&2 && return 1 )
  sed "${1}" ${2} | do_file_update ${2}
}


################################################################################
# Replaces variable value into a properties file
#   ${1}: Variable definition
#   ${2}: name of the file to modify
do_file_variable_value() {
  local var=$( echo ${1} | cut -d'=' -f1 )

  grep "^${1}$" ${2} && return 0

  if grep -q "^${var}=" ${2}; then
    do_file_sed "s!^${var}=.*$!/${1}/" ${2}
  else
    echo "${1}" | do_file_append ${2}
  fi
}

################################################################################
# Umounts every mounted filesystem in the device
#   ${1}: name of the device
do_umount() {
  local mnt
  mount | grep "^${1}" | tr -s ' ' | sort -r -k2,3 | cut -d' ' -f1 | while read mnt; do
    echo -n "umount ${mnt} ..."
    umount ${mnt}
    echo " Done."
  done
}

################################################################################
# Executes the commands indicated in the background
#   STDIN: commands
do_nohup() {
  local file=$( mktemp )

  {
    echo "#!/bin/bash"
    echo
    cat
    echo "rm ${file}"
  } > ${file}
  nohup bash ${file} > $( basename ${1} ).nohup.log &
}

################################################################################
# Checks if ${1} is a valid IP address
#   ${1}: string to check
# https://www.linuxjournal.com/content/validating-ip-address-bash-script
function do_check_valid_ip()
{
  local ip=${1}
  local OIFS=${IFS}

  [[ ${ip} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] || return 1

  IFS='.'
  ip=(${ip})
  IFS=${OIFS}
  [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 \
     && ${ip[3]} -le 255 ]] && return 0
  return 1
}

################################################################################
# Checks if executing user is root
do_check_root() {
  [ "$UID" -eq "0" ] || ( echo "Error: Only root can run this script" 1>&2 && return 1 )
}

################################################################################
# Checks if internet connection is on
do_check_inet() {
  ping -c 1 www.google.es > /dev/null 2>&1 || ( echo "Error: No internet connection" 1>&2 \
    && return 1 )
}

################################################################################
# Execute argments action
#   ${*}: action and arguments to execute
if [ -n "${*}" ]; then
  ${*}
fi

